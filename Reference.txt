Components
---
Thinking in Angular
---
  1. Identify number of components 
  2. Identify the hierarchy of components


Building Blocks
---
  Components 
    HTML, CSS, TS
  Directives [DONE]
  Services  [Wednesday]
  Interfaces / Classes / Models  [Wednesday]
  Pipes
  Guards
  Modules 
  Interceptor

----
Concepts 
--
  Data Binding [DONE]
  Routing (~1.5 Hours) [DONE]
  Cross Component Communication [Partially Covered]
  RxJS / Observables  [Wednesday]
  Lifecycle Hooks [Partially Covered]  [Wednesday]
  Unit Testing [Wednesday]



Project Structure - Feature-wise and building block-wise project structure 
-----
  src/
    app/
      shared/
        header/
          ...
          ...
          ...
          ...
        footer/
          ...
          ...
        menu/
          ...
          ...
          ...
      home/
      concepts/
        components/
          cpb/
          ceb/
          ...
          ...
          ...
        directives/
          ...
          ...
      about/
      employees/
      products/
      auth/
        login/
        signup/
        forgot-pw/
      dashboard/
      reports/
      tickets/
    ...
    ...
    ...
    ...



Styles in Angular
--
  1. External Styles 
      bootstrap.css, styles.css, app.comp.css 
  2. Internal Styles 
      will be inside @Component decorator (refer footer.comp.ts )
  3. Inline Styles 
      use style attribute in html element directly 
---

ViewEncapsulation and styling 
--
In Angular, a component's styles can be encapsulated within the component's host element so that 
they don't affect the rest of the application.
Refer: https://angular.io/guide/view-encapsulation

Routing in Angular (~1.5 Hours)
---
  * to make a single page app 

  SPA Characteristics (70):
  1. Pages should not refresh/reload [DONE]
  2. URL should be changed [DONE]
  3. History should be maintained [DONE]
  4. Header, Footer should be intact  [DONE]
  5. The section in between header and footer should be updated [DONE]
  6. Active Menu should be set [TODO]
  7. Page Title should be changed [TODO]

Routing 
---
  Step 0:
  --
    Identifying the URLs for Menus 
      Home                - http://localhost:4200/
      Concepts            - http://localhost:4200/concepts
      Employees           - http://localhost:4200/employees
      About               - http://localhost:4200/about

  Step 1:
  ---
    Let's create the components for the URL's 

    ng g c home -is -it 
    ng g c concepts -is 
    ng g c employees -is 
    ng g c about -is 
    

  Step 2:
  ---
     LEt's setup the URL's in menu.comp.html 

  Step 3: 
  --
    Check the URL. URL will change. But not stable. Let's fix it. 
    Now, it's time to config the routes in app-routing.module.ts 

    // Config the routes 
    const routes: Routes = [
      { path: '', component: HomeComponent},
      { path: 'concepts', component: ConceptsComponent },
      { path: 'employees', component: EmployeesComponent},
      { path: 'about', component: AboutComponent }
    ];

  Step 4:
  ---
    Check the app. URLs will be stable. But the component is loaded in between header and footer. 
    Let's fix it. 

    in app.comp.html, use router-outlet in between header and footer

    <!-- Ideal place for your layout -->
    <app-header></app-header>

    <div class="container mt-5 pt-2">
      <router-outlet></router-outlet>
    </div>

    <app-footer></app-footer>  

  Step 5:
  --
    Check the app. Page will still refresh. Let's fix it.

    in menu.comp.html -- replace all href with routerLink

  Step 6:
  --
    Let's work on active menu [TOMORROW]


Variables, methods, classes and Casing 
---
  1. camelCase  [ Recommended for Variables and methods ]
  2. PascalCase [ Recommended for Class, Interfaces, Components, Directives, Services, Guards, Pipes, Modules ]
  3. kebab-case [ Recommended sometimes for css classes ]
  4. snake_case [ Not Recommended ] 

valid variable names 
-
appName 

valid boolean names 
-
isLoggedIn, hasAuth

valid array names 
-
  colors, colorList 

valid object names 
-
  profileData, profile, 





Data Binding (~4 Hours)
---
  Binding the data from comp.ts into comp.html 

  TS => HTML 

  1. Interpolation
        TS => HTML 
        {{}} 

  2. Property Binding 
        TS => HTML 
        []

  3. Event Binding 
        TS <= HTML 
        ()
        Note: 'on' prefix should be removed from event 

        TODO: in events 

  4. Two Way Binding 
        TS <=> HTML 
        [(ngModel)]

        Note: applicable in form elements only 

  5. Custom Property Binding 
  6. Custom Event Binding 


===
Cross Component Communication
--
  1. Parent to Child Component Communication
      Using Custom Property Binding 

  2. Child to Parent Component Communication
      2.1 Using Custom Event Binding 
      2.2 Using @ViewChild() [TODO] 

  3. Any to Any Component Communication
      Using RxJS/Observable 
      Prereq: Services, RxJS/Observables, Subscription, LifeCycle Hooks 





Directives
---
  * special instructions to the DOM 

  1. Attribute Directives (will continue to learn many more)
      * manipulates the behavior of the el 
      routerLink

  2. Structural Directives 
      * manipulates the structural layer. 

        *ngIf
        *ngFor 
        ngSwitch [TODO]

  3. Custom Attribute Directives 

  4. Custom Structural Directives [TODO]
      

===
Setting up ESLint in Angular
---
  in command prompt exec the following command 

  ng add @angular-eslint/schematics

  Would you like to proceed? Yes 
  
  Then, wait for the following messages to appear in cmd prompt 
  
  CREATE .eslintrc.json (984 bytes)
  UPDATE package.json (1488 bytes)
  UPDATE angular.json (3574 bytes)
  âœ” Packages installed successfully.

  You are all set. 
  
---



--
Analysis => Design => [ Development => Testing ] => Deployment => Maintenance 
--

dev => qa => (bugs) => dev => qa => (bugs) => dev => qa => (bugs) => dev => qa => (QA PASSED) => Deployment 

dev writes test cases => dev writes functionality => (TOOLS) => instant feedback of success/failure 


calc 
--
  Developers: 
  ---
    Source: FRD, HLD, Mockups 
    Prepare: Test Cases (Real Requirements)
    ---
      1. inputs should be numbers 
      2. output should always be number
      3. if wrong input entered add button should be disabled 

    Project Features: ADD 
    --  
      function add(a: number, b: number): number {
        return a + b;
      }

      add(10, 20); // 30 

    Testing: Tools 
    ----



Automated Testing 
---
  * writing code to test our code using tools is automated testing 

  0. Static Type Checking 
      Tools: TypeScript 

  1. Unit Testing [LEARN]
      * Testing small unit of the feature 
      Tools: [Jasmine JS, Karma ]

  2. Integration Testing 
  3. End to End Testing (E2E Testing)

